{"version":3,"sources":["js\\dbAjax.js","main.js"],"names":["sendUserMood","date","usermood","usernote","request","XMLHttpRequest","open","setRequestHeader","send","smileys","document","querySelectorAll","feelingsTextArea","querySelector","shareFeelings","moodLeadText","userMoodContainer","userMoodSpan","moodNoteTextarea","submitFeeligns","enterFeelings","e","preventDefault","setInterval","forEach","item","classList","remove","add","curDate","Date","toJSON","slice","replace","setLocalStorage","userMoodEntry","userMoodNote","userMoodObj","userMoodArray","JSON","parse","localStorage","getItem","push","setItem","stringify","pickedMood","moodNote","userMood","userMedianMood","arr","reduce","a","b","length","addEventListener","smiley","event","currentTarget","parseInt","dataset","mood","value","toggleModal","toggleSuccessMessage","setTimeout","modal","trigger","closeButton","successModal","toggle","windowOnClick","target","window"],"mappings":"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","file":"main.b390ae7e.map","sourceRoot":"..","sourcesContent":["export function sendUserMood(date, usermood, usernote){\r\n  const request = new XMLHttpRequest();\r\n  request.open('POST', './db.php', true);\r\n  request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\r\n  request.send(date, usermood, usernote);\r\n};","\"use strict\";\r\n\r\nimport {sendUserMood} from './js/dbAjax';\r\n\r\n// Query Selectors\r\nconst smileys = [...document.querySelectorAll('.smiley')];\r\nconst feelingsTextArea = document.querySelector('#text-area-feelings')\r\nconst shareFeelings = document.querySelector('#enter-mood-picker');\r\nconst moodLeadText = document.querySelector('#mood-lead');\r\nconst userMoodContainer = document.querySelector('#user-mood-container');\r\nconst userMoodSpan = document.querySelector('#user-mood');\r\nconst moodNoteTextarea = document.querySelector('#mood-note');\r\nconst submitFeeligns = document.querySelector('#submit-feelings');\r\n\r\n// Function for toggling the modal >>> MOVE MODAL HERE <<<\r\nfunction enterFeelings(e) {\r\n  e.preventDefault();\r\n  setInterval(() => {\r\n    smileys.forEach(function(item){\r\n      item.classList.remove('hide'), item.classList.add('fadeInLeft')\r\n    });\r\n    feelingsTextArea.classList.remove('hide');\r\n    feelingsTextArea.classList.add('fadeInLeft');\r\n    userMoodContainer.classList.remove('hide');\r\n  }, 200)\r\n};\r\n\r\n\r\n// Current date generator.\r\nconst curDate = new Date().toJSON().slice(0,10).replace(/-/g,'/');\r\n\r\n// Function for assigning the users submitted mood to local storage\r\nfunction setLocalStorage(userMoodEntry, userMoodNote){\r\n  let userMoodObj = {\r\n    'date': curDate,\r\n    'usermood': userMoodEntry,\r\n    'note': userMoodNote\r\n  }\r\n  let userMoodArray = JSON.parse(localStorage.getItem('userentry')) || [];\r\n  userMoodArray.push(userMoodObj);\r\n  localStorage.setItem('userentry', JSON.stringify(userMoodArray));\r\n};\r\n\r\nlet pickedMood = 0;\r\nlet moodNote = '';\r\nlet userMood = [];\r\n\r\n// Get the median mood value from the userMood array.\r\nconst userMedianMood = arr => arr.reduce((a,b) => a + b, 0) / userMood.length;\r\n\r\nshareFeelings.addEventListener('click', enterFeelings);\r\n\r\n\r\n// Assign clickListener for each smiley.\r\nsmileys.forEach(smiley => smiley.addEventListener('click', function(){\r\n  smileys.forEach(item => item.classList.remove('pickedMood'));\r\n  event.currentTarget.classList.add('pickedMood');\r\n  pickedMood = parseInt(smiley.dataset.mood)\r\n}));\r\n\r\n// Submit feelings click listener, toggling the modals after submitted and saved in local storage.\r\nsubmitFeeligns.addEventListener('click', function(){\r\n  moodNote = JSON.stringify(moodNoteTextarea.value);\r\n  setLocalStorage(pickedMood, moodNote);\r\n  moodNoteTextarea.value = '';\r\n  pickedMood = 0;\r\n  toggleModal();\r\n  toggleSuccessMessage();\r\n  //sendUserMood(curDate, pickedMood, moodNote); DEVELOP THIS FURTHER ON\r\n  setTimeout(() => {\r\n    toggleSuccessMessage();\r\n  }, 3000)\r\n});\r\n\r\n// Query Selectors for the modals.\r\nconst modal = document.querySelector('.modal');\r\nconst trigger = document.querySelector('.trigger');\r\nconst closeButton = document.querySelector('.close-button');\r\nconst successModal = document.querySelector('.success-modal');\r\n\r\n\r\n// Functions for toggling the modals.\r\nfunction toggleModal(){\r\n  modal.classList.toggle('show-modal');\r\n}\r\n\r\nfunction toggleSuccessMessage(){\r\n  successModal.classList.toggle('show-modal-success');\r\n}\r\n\r\nfunction windowOnClick(event) {\r\n  if(event.target === modal) {\r\n    toggleModal();\r\n  }\r\n}\r\n\r\ntrigger.addEventListener('click', toggleModal);\r\ncloseButton.addEventListener('click', toggleModal);\r\nwindow.addEventListener('click', windowOnClick);\r\n"]}